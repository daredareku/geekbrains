# Условие 1:
# Оформляйте ноутбук, используя эти советы:
# Номер задачи - заголовок 2
# Номер подзадачи - заголовок 3
# Предоставленные наборы данных оформляйте, как код
# Рекомендации для преподавателей по оценке задания:
# Смотреть, чтобы студент красиво оформлял ноутбук, использовал ячейки с текстом, указывал номера заданий
""" python for i in range(10): print(i) """
# Sort from less to bigger
def sort_less_to_bigger(*args):
    args = list(args)
    return sorted(args)
# Условие 2:
# На складе лежат разные фрукты в разном количестве.
# Нужно написать функцию, которая на вход принимает любое количество названий фруктов и их количество, а возвращает общее количество фруктов на складе
# Условие 2:
# На складе лежат разные фрукты в разном количестве.
# Нужно написать функцию, которая на вход принимает любое количество названий фруктов и их количество, а возвращает общее количество фруктов на складе
def fruits(self, *args -> dict[str, int]): # (self, *args) -> dict[str, int]
    sum_fruit = sum(args)
    n_fruit = len(args)
    for i in args:
        print(i)   
    return {
        'sum.fruit': sum_fruit
        }
fruits(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)    
# Условие 3:
# Дан список с затратами на рекламу. Но в данных есть ошибки, некоторые затраты имеют отрицательную величину. Удалите такие значения из списка и посчитайте суммарные затраты
# [100, 125, -90, 345, 655, -1, 0, 200]
# Используйте list comprehensions
def ads():
    ads = [100, 125, -90, 345, 655, -1, 0, 200]
    ads = [i for i in ads if i > 0]
    return ads
# Условие 4.1:
# Даны два списка.
# Дата покупки
# ['2021-09-14', '2021-12-15', '2021-09-08', '2021-12-05', '2021-10-09', '2021-09-30', '2021-12-22', '2021-11-29', '2021-12-24', '2021-11-26', '2021-10-27', '2021-12-18', '2021-11-09', '2021-11-23', '2021-09-27', '2021-10-02', '2021-12-27', '2021-09-20', '2021-12-13', '2021-11-01', '2021-11-09', '2021-12-06', '2021-12-08', '2021-10-09', '2021-10-31', '2021-09-30', '2021-11-09', '2021-12-13', '2021-10-26', '2021-12-09']
# Суммы покупок по датам
# [1270, 8413, 9028, 3703, 5739, 4095, 295, 4944, 5723, 3701, 4471, 651, 7037, 4274, 6275, 4988, 6930, 2971, 6592, 2004, 2822, 519, 3406, 2732, 5015, 2008, 316, 6333, 5700, 2887]
# 4.1 Найдите, какая выручка у компании в ноябре
# Используйте list comprehensions
def purchase41(amount):
    purchase = ['2021-09-14', '2021-12-15', '2021-09-08', '2021-12-05', '2021-10-09', '2021-09-30', '2021-12-22', '2021-11-29', '2021-12-24', '2021-11-26', '2021-10-27', '2021-12-18',\
                '2021-11-09', '2021-11-23', '2021-09-27', '2021-10-02', '2021-12-27', '2021-09-20', '2021-12-13', '2021-11-01', '2021-11-09', '2021-12-06', '2021-12-08', '2021-10-09',\
                    '2021-10-31', '2021-09-30', '2021-11-09', '2021-12-13', '2021-10-26', '2021-12-09']
    sum_purchase = [1270, 8413, 9028, 3703, 5739, 4095, 295, 4944, 5723, 3701, 4471, 651, 7037, 4274, 6275, 4988, 6930, 2971, 6592, 2004, 2822, 519, 3406, 2732, 5015, 2008, 316, 6333, 5700, 2887]
    #purchase = dict(zip(purchase, sum_purchase))
    
    purchase = [i for i in purchase if i == '2021-11-09']
    
    return sum_purchase[purchase.index('2021-11-09')]
# 4.2 Найдите выручку компании в зависимости от месяца
# Для этого напишите функцию, которая на вход принимает список с датами и список с выручкой, а на выходе словарь, где ключи - это месяцы, а значения - это выручка.
# Используйте аннотирование типов.
def purchase42(amount):
    purchase = ['2021-09-14', '2021-12-15', '2021-09-08', '2021-12-05', '2021-10-09', '2021-09-30', '2021-12-22', '2021-11-29', '2021-12-24', '2021-11-26', '2021-10-27', '2021-12-18',\
                '2021-11-09', '2021-11-23', '2021-09-27', '2021-10-02', '2021-12-27', '2021-09-20', '2021-12-13', '2021-11-01', '2021-11-09', '2021-12-06', '2021-12-08', '2021-10-09',\
                    '2021-10-31', '2021-09-30', '2021-11-09', '2021-12-13', '2021-10-26', '2021-12-09']
    
    return{purchase[i]:amount[i] for i in range(len(purchase))}

def calc_purchases(*args):
    sum_purch=sum(args)
    n_purch=len(args)
    return{
        'sum_purch': sum_purch,
        'mean':sum_purch/n_purch
    }
calc_purchases(1, 2, 3, 4, 5, 6)

# Calculate the total random numbers from the 0 to 100 total 5
import random
data=[random.randint(0, 100) for i in range(5)]
data 
random.seed(0)    

import time
def fun(data):
    last_time=None #time.time()
    for i in (data):
        curen_time=time.time()
        if last_time is not None:
            delta=curen_time-last_time
        else:
            delta=curen_time-curen_time
        last_time=time.time()
        yield(int(delta), i)
for i in fun(data):
    print(i)
    time.sleep(2)
#                     
        